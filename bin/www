#!/usr/bin/env node

/**
 * Module dependencies.
 */

let app = require('../app');
let debug = require('debug')('confusionserver:server');
let http = require('http');
let https = require('https');
let fs = require('fs');
let log = require('tracer').console({ format: "{{message}}  - {{file}}:{{line}}" }).log;
// let art = require('ascii-art');

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
app.set('secPort', port + 443);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
  console.log('Server listening on port ', app.get('port'));
});
server.on('error', onError);
server.on('listening', onListening);

// Uncomment the following code if you want to use secure server.
// /**
//  * Create HTTPS server.
//  */

// // Read the certificate and private key from bin folder.
// let options = {
//   key: fs.readFileSync(__dirname + '/private.key'),
//   cert: fs.readFileSync(__dirname + '/certificate.pem')
// };

// let secureServer = https.createServer(options, app);
// /**
//  * Listen on provided port, on all network interfaces.
//  */

// secureServer.listen(app.get('secPort'), () => {
//   console.log('Secure Server listening on port ', app.get('secPort'));
// });
// secureServer.on('error', onError);
// secureServer.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);

  // art.font('node    api    server', 'Doom', function (rendered) {
  //   console.log(rendered);
  // });
  log("###########################################################################");
}
